-- The PluginInfo header contains some important information that Q-Sys Designer will parse when compiled.
-- Id is a unique ID given to every plugin. While we typically use randomly generated UUID's, you can use anything here so long as it is unique

PluginInfo = {
	Name = "Avonic~Camera (0.0.0.0-master)", -- The tilde here indicates folder structure in the Shematic Elements pane
	Version = "0.0.0.0-master",
	Id = "qsysc.avonic.camera.visca.0.0.0.0-master", -- show this is just a unique id. Show some commented out 'fun' unique ids
	Description = "Plugin for control of a Avonic Camera using the VISCA protocol",
	ShowDebug = true
}

-- Once you've drawn your plugin in Designer, you can determine what colors you use a lot. Save yourself some time by putting them in a table, and then simply calling them later.
local Colors = {
	White = {255, 255, 255},
	Black = {0, 0, 0},
	Red = {255, 0, 0},
	Green = {0, 255, 0}
}

local MaxBoxes = 8
preset_count = 127
-- Static properties
visca_address = 1

-- We can let users determine some of the plugin properties by exposing them here
-- While this function can be very useful, it is completely optional and not always needed.
-- If no Properties are set here, only the position and fill properties of your plugin will show in the Properties pane
function GetProperties()
	props = {
		{
			Name = "IP Host",
			Type = "string",
			Value = "127.0.0.1"
		},
		{
			Name = "IP Port",
			Type = "integer",
			Value = 1259,
			Min = 1024,
			Max = 65535
		},
		{
            Name = "Username",
            Type = "string",
            Value = "admin"
		},
		{
            Name = "Password",
            Type = "string",
            Value = "admin"
		},
		{
			Name = "Preset Count",
			Type = "integer",
			Value = 6,
			Min = 1,
			Max = 128
		},
	}
	return props
end

-- The below function is optional (like GetProperties() is), but it can allow further customization of what users can and can't do with your plugin.
-- In this example, when Model 1 is selected in the properties pane, the ability to modify some of the properties will be hidden, only allowing customization with Model 2
-- Another application of this is if you have different input/output types for different models, and want those properties to be dynamic in the Properties pane
function RectifyProperties(props)
	return props
end

-- The below function is where you will populate the controls for your plugin.
function GetControls(props)
	ctls = {
		-- System Pins
		{
			Name = "Online",
			ControlType = "Indicator",
			IndicatorType = "Led",
			PinStyle = "Output",
			Count = 1,
			UserPin = true
		},
		{
			Name = "ConnectionState",
			ControlType = "Indicator",
			IndicatorType = "Text",
			PinStyle = "Output",
			UserPin = true
		},
		{
			Name = "FirmwareVersion",
			ControlType = "Indicator",
			IndicatorType = "Text",
			PinStyle = "Output",
			UserPin = true
		},
		-- Control Pins
		{
			Name = "PanTiltDrive-Up",
			ControlType = "Button",
			ButtonType = "Momentary",
			UserPin = true,
			PinStyle = "Input"
		},
		{
			Name = "PanTiltDrive-Dn",
			ControlType = "Button",
			ButtonType = "Momentary",
			UserPin = true,
			PinStyle = "Input"
		},
		{
			Name = "PanTiltDrive-Lt",
			ControlType = "Button",
			ButtonType = "Momentary",
			UserPin = true,
			PinStyle = "Input"
		},
		{
			Name = "PanTiltDrive-Rt",
			ControlType = "Button",
			ButtonType = "Momentary",
			UserPin = true,
			PinStyle = "Input"
		},
		{
			Name = "CAM_Zoom-Z+",
			ControlType = "Button",
			ButtonType = "Momentary",
			UserPin = true,
			PinStyle = "Input"
		},
		{
			Name = "CAM_Zoom-Z-",
			ControlType = "Button",
			ButtonType = "Momentary",
			UserPin = true,
			PinStyle = "Input"
		},
		{
			Name = "CAM_Memory-Set",
			ControlType = "Button",
			ButtonType = "Momentary",
			UserPin = true,
			PinStyle = "Input",
			Count = 128
		},
		{
			Name = "CAM_Memory-Recall",
			ControlType = "Button",
			ButtonType = "Momentary",
			UserPin = true,
			PinStyle = "Input",
			Count = 128
		}
	}
	return ctls
end

-- Variable holding Page Names for ease
local pagenames = {"System"}

function GetPages(props) -- This function allows you to populate pages in your plugin.
	pages = {}
	table.insert(pages, {name = pagenames[1]})
	return pages
end

function GetControlLayout(props)
	local ActiveRemote = props["page_index"].Value
	local layout = {}
	local graphics = {}
	local btn_size = {32,24}
	local x, y = 0, 0
	preset_count = props["Preset Count"].Value
	-- Status Info Section
	layout["Online"] = {
		PrettyName = "Online",
		Style = "Indicator",
		Color = {0, 255, 0},
		OffColor = {200, 0, 0},
		UnlinkOffColor = true,
		Position = {x + 3, y + 25},
		Size = {x + 25, y + 25}
	}
	layout["ConnectionState"] = {
		PrettyName = "Connection State",
		Style = "Text",
		HTextAlign = "Left",
		Padding = 5,
		StrokeWidth = 0,
		Position = {x + 35, y + 25},
		Size = {200, 25}
	}
	layout["FirmwareVersion"] = {
		PrettyName = "Firmware",
		Style = "Text",
		HTextAlign = "Left",
		StrokeWidth = 0,
		Position = {x + 235, y + 25},
		Size = {100, 25}
	}
	table.insert(
		graphics,
		{
			Type = "GroupBox", -- This is the overall groupbox that will give the plugin a more 'contained' look
			Text = "Status",
			HTextAlign = "Left",
			Fill = Colors.White,
			CornerRadius = 8,
			StrokeColor = Colors.Black,
			StrokeWidth = 1,
			Position = {x, y},
			Size = {415, 60} -- The width of the main GroupBox is dependent on how many channels the user specified. More channels means a wider group box
		}
	)

	-- Controls section
	y = y + 70

	table.insert(
		graphics,
		{
			Type = "GroupBox", -- This is the overall groupbox that will give the plugin a more 'contained' look
			Text = "Controls",
			HTextAlign = "Left",
			Fill = Colors.White,
			CornerRadius = 8,
			StrokeColor = Colors.Black,
			StrokeWidth = 1,
			Position = {x, y},
			Size = {415, 200} -- The width of the main GroupBox is dependent on how many channels the user specified. More channels means a wider group box
		}
	)
	table.insert(
		graphics,
		{
			Type = "Text",
			Text = "Motor:",
			Font = "Roboto",
			FontSize = 12,
			FontStyle = "Bold",
			HTextAlign = "Right",
			Color = Colors.Black,
			Position = {x + 00, y + 20},
			Size = {75, 25}
		}
	)
	table.insert(
		graphics,
		{
			Type = "Text",
			Text = "Zoom:",
			Font = "Roboto",
			FontSize = 12,
			FontStyle = "Bold",
			HTextAlign = "Right",
			Color = Colors.Black,
			Position = {x + 00, y + 45},
			Size = {75, 25}
		}
	)
	table.insert(
		graphics,
		{
			Type = "Text",
			Text = "Presets:",
			Font = "Roboto",
			FontSize = 12,
			FontStyle = "Bold",
			HTextAlign = "Right",
			Color = Colors.Black,
			Position = {x + 00, y + 70},
			Size = {75, 25}
		}
	)

	-- Remote Control Buttons
	layout["PanTiltDrive-Up"] = {
		PrettyName = "Control~Tilt Up",
		Legend = "Up",
		Style = "Button",
		ButtonStyle = "Momentary",
		Position = {x + 80, y + 20},
		Size = {40, 25}
	}
	layout["PanTiltDrive-Dn"] = {
		PrettyName = "Control~Tilt Down",
		Legend = "Down",
		Style = "Button",
		ButtonStyle = "Momentary",
		Position = {x + 125, y + 20},
		Size = {40, 25}
	}
	layout["PanTiltDrive-Lt"] = {
		PrettyName = "Control~Pan Left",
		Legend = "Left",
		Style = "Button",
		ButtonStyle = "Momentary",
		Position = {x + 170, y + 20},
		Size = {40, 25}
	}
	layout["PanTiltDrive-Rt"] = {
		PrettyName = "Control~Pan Right",
		Legend = "Right",
		Style = "Button",
		ButtonStyle = "Momentary",
		Position = {x + 215, y + 20},
		Size = {40, 25}
	}
	layout["CAM_Zoom-Z+"] = {
		PrettyName = "Control~Zoom In",
		Legend = "In",
		Style = "Button",
		ButtonStyle = "Momentary",
		Position = {x + 80, y + 45},
		Size = {40, 25}
	}
	layout["CAM_Zoom-Z-"] = {
		PrettyName = "Control~Zoom Out",
		Legend = "Out",
		Style = "Button",
		ButtonStyle = "Momentary",
		Position = {x + 125, y + 45},
		Size = {40, 25}
	}
	for i=1, preset_count do -- For each preset
		layout["CAM_Memory-Set "..i] = {
			PrettyName = "Preset Save~"..(i-1),
			Style = "Button",
			Color = Red,
			--OffColor = Red,
			Legend = "Save "..(i-1),
			Position = {x+48+ btn_size[1]*i,116+btn_size[2]},
			Size = btn_size
		}
		layout["CAM_Memory-Recall "..i] = {
			PrettyName = "Preset Recall~"..(i-1),
			Style = "Button",
			Color = Green,
			--OffColor = Green,
			Legend = "Recall "..(i-1),
			Position = {x+48+btn_size[1]*i,116+btn_size[2]*2},
			Size = btn_size
		}
	end
	return layout, graphics
end

-- Components provide a way to save or retain certain settings without necessarily displaying it in another control such as a combobox.
-- For example, the when someone hits the "Save" button on this plugin, it saves the RGB values in the "rgb_storage" component below.
-- This allows us to do things 'under the hood' which gives the plugin a much sleeker feel.
function GetComponents(props)
	return {}
end

if Controls then
	-- This is the area where you would put your 'Runtime' code, or the 'control' aspect of your plugin.
	-- Once you are confident in your script, simply copy and paste that script here, and then you can fully test the plugin completely
	-- Don't forget to comment out your code pin and hide the debug before distributing!

	-- Comms Variable
	Rx = ""

	-- Build TCP Client
	conn = TcpSocket.New()
	conn.ReadTimeout = 0
	conn.WriteTimeout = 0
	conn.ReconnectTimeout = 5

	-- Create and setup Polling
	timerPoll = Timer.New()

	timerPoll.EventHandler = function(timer)
		fnPoll()
	end

	function fnInitPoll()
		timerPoll:Stop()
		timerPoll:Start(20)
	end

	function fnPoll()
		-- Poll the Info
		fnSend("") --
	end

	-- Data Sending Helper Function
	function fnSend(cmd)
		if conn.IsConnected then
			-- Send to device
			print("-->Visca::" .. cmd)
			conn:Write("\x81" .. cmd .. "\xFF")
			-- Reset Polling
			fnInitPoll()
		end
	end
	function setConnState(msg)
		Controls["ConnectionState"].String =
			"[" .. Properties["IP Host"].Value .. ":" .. Properties["IP Port"].Value .. "] " .. msg
	end
	-- Setup Utility Callbacks as required
	conn.Connected = function(conn)
		setConnState("Connected")
		fnPoll()
	end
	conn.Reconnect = function(conn)
		setConnState("Reconnect")
	end
	conn.Closed = function(conn)
		setConnState("Closed")
		Controls.Online.Boolean = false
	end
	conn.Error = function(conn, err)
		setConnState("Error")
	end
	conn.Timeout = function(conn, err)
		setConnState("Timeout")
	end
	-- Helper Function - Open TCP Connection
	function fnConnect()
		-- Open Connection
		conn:Connect(Properties["IP Host"].Value, Properties["IP Port"].Value)
		-- Set IP Host value
		setConnState("Connecting")
	end

	-- Create and setup the Communications Timeout
	timerComms = Timer.New()
	timerComms.EventHandler = function(timer)
		timer:Stop()
		Controls.Online.Boolean = false
		print("Connection Timed Out")
		conn:Disconnect()
		fnConnect()
	end

	conn.Data = function(conn)
		Rx = Rx .. conn:Read(conn.BufferLength)
		while Rx:find("\xFF") do
			Packet = Rx:sub(1, Rx:find("\xFF"))
			Rx = Rx:sub(#Packet + 1)
			-- Trim Packet
			timerComms:Stop()
			Controls.Online.Boolean = true
			timerComms:Start(45)
		end
		-- Data Processing here
	end

	function goPanTilt(dir)
		if dir == "" then
			fnSend("\x01\x06\x01\x06\x06\x03\x03") -- Stop
		else
			fnSend("\x01\x06\x01\x06\x06" .. dir) -- Move
		end
	end

	function goZoom(dir)
		if dir == "" then
			fnSend("\x01\x04\x07\x00") -- Stop
		else
			fnSend("\x01\x04\x07" .. dir) -- Move
		end
	end
	for k, v in pairs(Controls) do
		if k:sub(1, #"PanTiltDrive-") == "PanTiltDrive-" then
			v.EventHandler = function(changedControl)
				if changedControl.Boolean == true then
					if k:sub(-2, -1) == "Up" then
						goPanTilt("\x03\01") -- Up
					elseif k:sub(-2, -1) == "Dn" then
						goPanTilt("\x03\02") -- Down
					elseif k:sub(-2, -1) == "Lt" then
						goPanTilt("\x01\03") -- Left
					elseif k:sub(-2, -1) == "Rt" then
						goPanTilt("\x02\03") -- Right
					end
				else
					goPanTilt("") -- Stop
				end
			end
		elseif k:sub(1, #"CAM_Zoom-") == "CAM_Zoom-" then
			v.EventHandler = function(changedControl)
				if changedControl.Boolean == true then
					if k:sub(-2, -1) == "Z+" then
						goZoom("\x02") -- In
					elseif k:sub(-2, -1) == "Z-" then
						goZoom("\x03") -- Out
					end
				else
					goZoom("") -- Stop
				end
			end
		end
	end
	for i=1, preset_count do
		Controls["CAM_Memory-Set"][i].EventHandler = function()
			fnSend("\x01\x04\x3F\x01" .. string.format("%x", (i-1)))
		end
		Controls["CAM_Memory-Recall"][i].EventHandler = function()
			fnSend("\x01\x04\x3F\x02" .. string.format("%x", (i-1)))
		end
	end
	-- Startup
	fnConnect()
end